// Code generated by go-bindata.
// sources:
// assets/index.html
// DO NOT EDIT!

package kassets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x6a\x23\x39\x10\xbd\xe7\x2b\x0a\x5f\xba\x0d\x59\xc9\xde\x85\xdd\x25\x69\x9b\xcd\xb2\x5e\x12\x48\x42\x88\x3d\xcc\x71\x2c\x4b\x65\x4b\x19\xb5\xd4\x48\xd5\xf6\x18\xd3\xff\x3e\xb4\x34\x4e\xec\xe4\x34\x30\xb7\xea\x52\x55\xbd\x57\x8f\xd7\x55\x69\xaa\xed\xf4\xe2\x02\xa0\xd2\x28\xd4\xf4\x02\x00\xa0\x22\x43\x16\xa7\x87\x03\x5b\xf4\x41\xd7\x55\x3c\x67\xfa\x32\x9e\xeb\xfa\x70\xe5\xd5\x3e\x77\x00\x54\x51\x06\xd3\x10\xc4\x20\x27\x03\x4d\xd4\xc4\x2b\xce\xa5\x72\xec\x25\x2a\xb4\x66\x1b\x98\x43\xe2\xae\xa9\xb9\xb6\x91\xbd\xc4\x7f\xac\x20\x8c\x34\x98\x56\x3c\x77\xa6\x91\x69\x92\x44\x47\x18\x8e\x83\x53\x4a\x8f\x7b\x36\x73\x0a\x28\xea\x47\x51\x63\xd7\x41\x4c\x1f\x15\xd7\xe3\xb3\xca\xad\x51\xe8\x41\xa3\xd9\x68\x9a\x0c\xfe\x1c\x8d\x06\x60\xd4\x64\x90\xd2\x03\x90\xde\x51\xf0\x36\x4e\x2b\x9e\x32\xaf\xec\xf9\x11\xf4\x7c\x9d\xb7\xd1\x66\x5d\xde\xda\xc8\x4c\x9c\xb7\x4d\xe3\x03\xa1\x2a\x87\x43\x38\x9c\x40\x6f\x45\x80\x8c\x3e\x01\xe5\x65\x5b\xa3\x23\xb6\x41\x9a\x59\xec\xc3\x7f\xf7\x77\xaa\x2c\x52\x41\x31\xbc\x7e\xd7\xa7\x6d\x84\x09\x38\xdc\xc1\xad\x8d\xe5\xd9\x73\x2f\x97\xf5\x42\xcd\x7d\x1b\x24\x96\x45\xaf\xed\x15\xe7\xe3\xdf\xff\x62\x23\x36\x62\xe3\xab\xc3\x81\x3d\xf9\x40\x5d\xc7\x0f\x07\x76\xd3\x34\xd6\x48\x41\xc6\xbb\x9c\x38\xd5\x8c\x37\x56\xec\xad\x89\xc4\xea\x3f\xda\xbf\x8b\x0f\x30\x82\x48\x48\xfd\x80\xca\x88\x32\x11\xfd\x50\xe1\x5d\x52\x61\xb6\x45\x47\x91\x3d\xdc\x3c\xde\xfd\x3f\x9b\x2f\xbe\x3c\xdd\x3c\xcf\x67\xff\x5d\xae\x5b\x27\x7b\xe4\xf2\x5c\x18\xc8\xb2\xb0\x1e\xfd\x74\xb7\xee\x2d\xee\x8e\x01\xe7\x90\xfd\x01\x26\x82\xf3\x04\xf1\x28\x37\x78\x07\x8d\x15\xb4\xf6\xa1\x8e\x40\x5a\x10\x28\x9f\x4a\xb4\xd8\x22\x24\xd6\x90\x45\x82\xd9\x37\x42\x17\x8d\x77\x11\xca\x87\xf9\x6c\x08\xe8\xc4\xca\xa2\x62\x27\x30\x9f\x35\x3a\x20\x8d\xb0\x0a\x7e\x17\x31\x80\x16\x11\x56\xad\xb1\xf4\x9b\x71\x70\x7b\x3f\x3f\x42\x43\x29\x35\xca\xaf\xd0\x46\xe3\x36\xb0\x94\xc2\x3d\x59\xb1\x5f\xec\x1b\x5c\x0e\x2f\x61\x87\x20\x85\x83\x26\xf8\x7e\x49\x10\xb9\xb5\x16\xce\xac\x31\x12\x94\x86\x21\x83\xa4\x37\x7c\x7a\xbe\x1f\x82\x32\x01\x25\xd9\x3d\x90\x4f\xe8\xd9\x31\x98\x3d\x02\xa4\x83\x6f\x37\x9a\xd2\xd3\x32\x06\xb9\xec\x27\x37\x18\x68\x7f\xca\x7d\xa1\x4d\x12\x28\x53\x4a\x4b\x1c\x89\x1f\x49\xfb\x75\xca\x37\x56\x18\x77\x0e\x72\x09\x3b\x43\xda\xb7\xf4\xa3\x3d\xeb\xfd\x3a\x1e\xd0\x46\x04\xb3\x86\x6c\x01\x76\xb2\x6f\x59\x88\x37\x7b\xf1\xad\x53\xac\xff\x46\x56\x37\xb8\x69\x83\x2d\xde\xff\x10\xa9\x3f\x06\x09\x13\xf8\x85\xb6\xbd\xfe\x00\x21\x94\x4a\x8e\xbc\x37\x91\xd0\x61\x28\x0b\x29\x5c\xdf\x54\xfc\xac\x25\xcf\x4c\xf9\xea\xca\xb3\x13\x55\xf1\x7c\xf6\x2a\x9e\x4f\xe7\xf7\x00\x00\x00\xff\xff\xd6\xac\x5c\xe8\x42\x05\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 1346, mode: os.FileMode(420), modTime: time.Unix(1548966886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
